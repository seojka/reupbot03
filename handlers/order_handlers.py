from telegram import Update
from telegram.ext import CallbackContext, ConversationHandler
from utils.keyboards import get_categories_keyboard, remove_keyboard, get_main_menu
from utils.notifications import send_notification
from utils.database import save_order
from config import YOUR_TELEGRAM_USERNAME
from datetime import datetime
from .conversation_states import *

async def order(update: Update, context: CallbackContext) -> int:
    """–ù–∞—á–∞–ª–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    user = update.message.from_user
    
    # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç username, –Ω–∞–ø–æ–º–∏–Ω–∞–µ–º –µ–º—É
    if not user.username:
        reminder_text = f"""
üìù <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b>

–£ –≤–∞—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω username –≤ Telegram. –†–µ–∫–æ–º–µ–Ω–¥—É—é –µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —Å–≤—è–∑–∏.

–ê –ø–æ–∫–∞ –≤—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ –£–∫–∞–∑–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω –≤ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –ò–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ –Ω–∞–ø—Ä—è–º—É—é: [–ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ](https://t.me/{YOUR_TELEGRAM_USERNAME})
        """
        await update.message.reply_text(
            reminder_text,
            parse_mode='HTML',
            disable_web_page_preview=True
        )
    
    await update.message.reply_text(
        "üè† –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É—Å–ª—É–≥–∏:",
        reply_markup=get_categories_keyboard()
    )
    
    return CATEGORY

async def category(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    user_choice = update.message.text
    context.user_data['category'] = user_choice
    
    if user_choice == "‚ùå –û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞":
        return await cancel(update, context)
        
    elif user_choice == "–ü–æ–¥—ä—ë–º –¥–æ–º–∞":
        await update.message.reply_text(
            "üè† –ü–æ–¥—ä—ë–º –¥–æ–º–∞\n\n–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "–†–∞–∑–º–µ—Ä –¥–æ–º–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 6x8–º), –≠—Ç–∞–∂–Ω–æ—Å—Ç—å, –í—ã—Å–æ—Ç–∞ –ø–æ–¥—ä–µ–º–∞\n\n"
            "–ü—Ä–∏–º–µ—Ä: 6x8–º, 1, 1.2–º",
            reply_markup=remove_keyboard()
        )
        return HOUSE_LIFTING
        
    elif user_choice == "–ó–∞–º–µ–Ω–∞ –≤–µ–Ω—Ü–æ–≤":
        await update.message.reply_text(
            "üî® –ó–∞–º–µ–Ω–∞ –≤–µ–Ω—Ü–æ–≤\n\n–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "–ú–∞—Ç–µ—Ä–∏–∞–ª (–±—Ä—É—Å/–±—Ä–µ–≤–Ω–æ), –°–µ—á–µ–Ω–∏–µ, –ü–æ–≥–æ–Ω–Ω—ã–µ –º–µ—Ç—Ä—ã\n\n"
            "–ü—Ä–∏–º–µ—Ä: –±—Ä—É—Å, 150x150–º–º, 25",
            reply_markup=remove_keyboard()
        )
        return CROWN_REPLACEMENT
        
    elif user_choice == "–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –¥–æ–º–∞":
        await update.message.reply_text(
            "üöö –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –¥–æ–º–∞\n\n–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "–†–∞–∑–º–µ—Ä –¥–æ–º–∞, –ú–∞—Ç–µ—Ä–∏–∞–ª —Å—Ç–µ–Ω, –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ, –ì–æ—Ç–æ–≤ –ª–∏ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç (–¥–∞/–Ω–µ—Ç/–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ)\n\n"
            "–ü—Ä–∏–º–µ—Ä: 5x6–º, –±—Ä—É—Å, 50–º, –¥–∞",
            reply_markup=remove_keyboard()
        )
        return HOUSE_MOVING
        
    elif user_choice == "–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –∫–∞—Ä–∫–∞—Å–Ω—ã—Ö –¥–æ–º–æ–≤":
        await update.message.reply_text(
            "üè° –°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –∫–∞—Ä–∫–∞—Å–Ω—ã—Ö –¥–æ–º–æ–≤\n\n–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "–†–∞–∑–º–µ—Ä, –≠—Ç–∞–∂–Ω–æ—Å—Ç—å, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç, –û—Ç–¥–µ–ª–∫–∞, –ü–æ–∂–µ–ª–∞–Ω–∏—è\n\n"
            "–ü—Ä–∏–º–µ—Ä: 8x10–º, 1, 3, —á–∏—Å—Ç–æ–≤–∞—è, —Ç–µ—Ä—Ä–∞—Å–∞ –∏ –∫–æ—Ç–µ–ª—å–Ω–∞—è",
            reply_markup=remove_keyboard()
        )
        return FRAME_HOUSES
        
    else:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö:",
            reply_markup=get_categories_keyboard()
        )
        return CATEGORY

async def house_lifting(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–¥—ä–µ–º–∞ –¥–æ–º–∞"""
    if update.message.text == "‚ùå –û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞":
        return await cancel(update, context)
        
    context.user_data['details'] = update.message.text
    await update.message.reply_text(
        "üìû –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ Telegram):",
        reply_markup=remove_keyboard()
    )
    return CONTACT_INFO

async def crown_replacement(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–º–µ–Ω—ã –≤–µ–Ω—Ü–æ–≤"""
    if update.message.text == "‚ùå –û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞":
        return await cancel(update, context)
        
    context.user_data['details'] = update.message.text
    await update.message.reply_text(
        "üìû –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ Telegram):",
        reply_markup=remove_keyboard()
    )
    return CONTACT_INFO

async def house_moving(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –¥–æ–º–∞"""
    if update.message.text == "‚ùå –û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞":
        return await cancel(update, context)
        
    context.user_data['details'] = update.message.text
    await update.message.reply_text(
        "üìû –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ Telegram):",
        reply_markup=remove_keyboard()
    )
    return CONTACT_INFO

async def frame_houses(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –∫–∞—Ä–∫–∞—Å–Ω—ã—Ö –¥–æ–º–æ–≤"""
    if update.message.text == "‚ùå –û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞":
        return await cancel(update, context)
        
    context.user_data['details'] = update.message.text
    await update.message.reply_text(
        "üìû –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ Telegram):",
        reply_markup=remove_keyboard()
    )
    return CONTACT_INFO

async def contact_info(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
    if update.message.text == "‚ùå –û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞":
        return await cancel(update, context)
        
    contact_data = update.message.text
    user_data = context.user_data
    user = update.message.from_user
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑
    save_order(
        user_id=user.id,
        username=user.username or user.first_name,
        category=user_data.get('category', ''),
        details=user_data.get('details', ''),
        contact_info=contact_data
    )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    order_text = f"""
üìã <b>–ù–û–í–´–ô –ó–ê–ö–ê–ó!</b>

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user.first_name}"""
    
    if user.username:
        order_text += f" (@{user.username})"
    
    order_text += f"""
üÜî <b>ID:</b> {user.id}
üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã:</b> {contact_data}
üè† <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {user_data.get('category', '')}
üìù <b>–î–µ—Ç–∞–ª–∏:</b> {user_data.get('details', '')}

‚è∞ <b>–í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞:</b> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

üí¨ <b>–°—Å—ã–ª–∫–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞:</b> <a href="tg://user?id={user.id}">–ù–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é</a>
    """
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    await send_notification(context, order_text)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
    success_text = "‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\n–î–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞ –Ω–∞–∂–º–∏—Ç–µ /order"
    await update.message.reply_text(
        success_text,
        reply_markup=get_main_menu()
    )
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data.clear()
    
    return ConversationHandler.END

async def cancel(update: Update, context: CallbackContext) -> int:
    """–û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞"""
    user = update.message.from_user
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã
    await update.message.reply_text(
        '‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω. –î–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞ –Ω–∞–∂–º–∏—Ç–µ /order',
        reply_markup=get_main_menu()
    )
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ
    cancel_text = f"‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user.first_name}"
    if user.username:
        cancel_text += f" (@{user.username})"
    cancel_text += f" ({user.id})"
    
    await send_notification(context, cancel_text)
    
    context.user_data.clear()
    return ConversationHandler.END